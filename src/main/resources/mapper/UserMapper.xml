<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.mapper.UserMapper">
  <resultMap id="BaseResultMap" type="com.example.demo.entity.model.User">
    <id column="id" jdbcType="VARCHAR" property="id" />
    <result column="login_name" jdbcType="VARCHAR" property="loginName" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="user_name" jdbcType="VARCHAR" property="userName" />
    <result column="phone" jdbcType="VARCHAR" property="phone" />
    <result column="role" jdbcType="VARCHAR" property="role" />
    <result column="valid" jdbcType="VARCHAR" property="valid" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
  </resultMap>
  <sql id="Base_Column_List">
    id, login_name, password, user_name, phone, role, valid, create_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from `user`
    where id = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from `user`
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.example.demo.entity.model.User">
    insert into `user` (id, login_name, password,
      user_name, phone, role,
      valid, create_time)
    values (#{id,jdbcType=VARCHAR}, #{loginName,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR},
      #{userName,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR}, #{role,jdbcType=VARCHAR},
      #{valid,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.example.demo.entity.model.User">
    insert into `user`
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null and id != ''">
        id,
      </if>
      <if test="loginName != null and loginName != '' ">
        login_name,
      </if>
      <if test="password != null and password != ''">
        password,
      </if>
      <if test="userName != null and userName != ''">
        user_name,
      </if>
      <if test="phone != null and phone != ''">
        phone,
      </if>
      <if test="role != null and role != ''">
        role,
      </if>
      <if test="valid != null and valid != ''">
        valid,
      </if>
      <if test="createTime != null ">
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null and id != ''">
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="loginName != null and loginName != ''">
        #{loginName,jdbcType=VARCHAR},
      </if>
      <if test="password != null and password != ''">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="userName != null and userName != ''">
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="phone != null and phone != ''">
        #{phone,jdbcType=VARCHAR},
      </if>
      <if test="role != null and role != ''">
        #{role,jdbcType=VARCHAR},
      </if>
      <if test="valid != null and valid != ''">
        #{valid,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.demo.entity.model.User">
    update `user`
    <set>
      <if test="loginName != null and loginName != ''">
        login_name = #{loginName,jdbcType=VARCHAR},
      </if>
      <if test="password != null and password != ''">
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="userName != null and userName != ''">
        user_name = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="phone != null and phone != ''">
        phone = #{phone,jdbcType=VARCHAR},
      </if>
      <if test="role != null and role != ''">
        role = #{role,jdbcType=VARCHAR},
      </if>
      <if test="valid != null and valid != ''">
        valid = #{valid,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.demo.entity.model.User">
    update `user`
    set login_name = #{loginName,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      user_name = #{userName,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=VARCHAR},
      role = #{role,jdbcType=VARCHAR},
      valid = #{valid,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=VARCHAR}
  </update>

  <select id="login" parameterType="java.lang.String" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from `user`
    where login_name = #{loginName,jdbcType=VARCHAR}
    and password = #{password,jdbcType=VARCHAR}
  </select>

  <select id="getValidUser" parameterType="java.lang.String" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from `user`
    where id = #{id,jdbcType=VARCHAR} and valid = '1'
  </select>

  <select id="selectUserByLoginName" parameterType="java.lang.String" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from `user`
    where login_name = #{loginName,jdbcType=VARCHAR}
  </select>

  <select id="getAllUser"  resultMap="BaseResultMap" parameterType="com.example.demo.entity.dto.SelectUserDto">
    select
    <include refid="Base_Column_List" />
    from `user`
    <where>
      <if test="loginName != null and loginName != ''">
        login_name like "%"#{loginName}"%"
      </if>
      <if test="userName != null and userName != ''">
        and user_name like "%"#{userName}"%"
      </if>
    </where>
    order by role,create_time desc
  </select>

</mapper>
